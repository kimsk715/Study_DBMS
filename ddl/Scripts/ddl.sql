/*
 * 
 * 
 * 회원 테이블
 * 회원 번호
 * 회원 아이디
 * 회원 비밀번호
 * 회원 나이
 * */

/*CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(1000) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0)
);*/




/*CREATE TABLE TBL_ORDER(
	 ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   ORDER_DATE DATE DEFAULT SYSDATE,
   ORDER_COUNT NUMBER DEFAULT 1,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)

)*/

/*CREATE TABLE TBL_ZOO(
	ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
	ZOO_NAME VARCHAR2(1000),
	ZOO_ADDRESS VARCHAR2(1000),
	ZOO_DETAILADDRESS VARCHAR2(1000),
	ZOO_MAXSTACK NUMBER(3) CONSTRAINT CHECK_STACK CHECK(ZOO_MAXSTACK > 0)
);*/
/*
 * 
 * 동물원 테이블
 * 
 * 고유 번호
 * 동물원 이름
 * 동물원 주소
 * 동물원 상세 주소
 * 동물 최대 수용치
 * */

/*DROP TABLE TBL_ANIMAL;
CREATE TABLE TBL_ANIMAL(
	ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
	ANIMAL_NAME VARCHAR2(1000) NOT NULL,
	ANIMAL_TYPE VARCHAR2(1000) NOT NULL,
	ANIMAL_AGE NUMBER DEFAULT 0,
	ANIMAL_HEIGHT NUMBER(10,5),
	ANIMAL_WEIGHT NUMBER(10,5),
	ZOO_ID NUMBER NOT NULL,
	CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
	REFERENCES TBL_ZOO(ID)
);*/

/*
 * 동물 테이블
 * 동물 고유번호
 * 동물 이름
 * 동물 종(타입)
 * 동물 나이
 * 동물 키
 * 동물 몸무게
 * 
 * 동물원 번호
 * */

/*
 * 회사와 직원
 * 회사
 * 회사 고유번호
 * 회사 이름
 * 회사 종류
 * 
 * 직원
 * 직원 고유번호
 * 직원 이름
 * 직원 부서
 * 직원 나이
 * 직원 입사년도
 * 
 * 
 * */
/*
CREATE TABLE TBL_COMPANY(
	COMPANY_ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
	COMPANY_NAME VARCHAR2(1000),
	COMPANY_CATEGORY VARCHAR2(1000)
);*/

/*
CREATE TABLE TBL_STAFF(
	STAFF_ID NUMBER CONSTRAINT PK_STAFF PRIMARY KEY,
	STAFF_NAME VARCHAR2(1000),
	STAFF_DEPARTMENT VARCHAR2(1000),
	STAFF_AGE NUMBER(3),
	STAFF_ENTERYEAR NUMBER(5),
	COMPANY_ID NUMBER NOT NULL,
	CONSTRAINT FK_STAFF_COMPANY FOREIGN KEY(COMPANY_ID)
	REFERENCES TBL_COMPANY(COMPANY_ID)
);*/


/*
 회원      주문      상품
      -----------------------------------------------------      
      번호P      번호P      번호P
      -----------------------------------------------------
      이메일U      날짜D(SYSDATE)   이름NN
      비밀번호NN   회원번호F      가격D(0)
      이름NN      상품번호F      재고D(0)
      주소NN      
      생일
*/



/*
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);
*/

/*CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);*/

/*CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_DATE DATE DEFAULT SYSDATE,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);*/
/*
 * 1. 요구사항 분석
 *    꽃 테이블과 화분 테이블 2개가 필요하고,
 *  꽃을 구매할 때 화분도 같이 구매합니다.
 *  꽃은 이름과 색상, 가격이 있고
 *  화분은 제품번호, 색상, 모양이 있습니다.
 *    화분은 모든 꽃을 담을 수 없고 정해진 꽃을 담아야 합니다.
 * 
 * 2. 개념 모델링
 * 3. 논리 모델링
 * 4. 물리 모델링
 * 5. 구현 
 * 
 * ** 쉬운 버전: 하나의 화분은 1개 종류의 꽃만 담을 수 있다.
 * ** 어려운 버전: 하나의 화분은 여러 종류의 꽃을 담을 수 있다.
 * */

/*CREATE TABLE TBL_FLOWER(
   ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
   FLOWER_NAME VARCHAR2(1000) NOT NULL,
   FLOWER_COLOR VARCHAR2(1000) NOT NULL,
   FLOWER_PRICE NUMBER DEFAULT 0
);*/


CREATE TABLE TBL_POT(
   ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
   POT_COLOR VARCHAR2(1000) NOT NULL,
   POT_SHAPE VARCHAR2(1000) NOT NULL,
   FLOWER_ID NUMBER,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   REFERENCES TBL_FLOWER(ID)
);

/*CREATE TABLE TBL_POT(
   ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
   POT_COLOR VARCHAR2(1000) NOT NULL,
   POT_SHAPE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   FLOWER_ID NUMBER NOT NULL,
   POT_ID NUMBER NOT NULL,
   CONSTRAINT FK_FLOWER_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   REFERENCES TBL_FLOWER(ID),
   CONSTRAINT FK_FLOWER_POT_POT FOREIGN KEY(POT_ID)
   REFERENCES TBL_POT(ID)
);*/


/*
 * 1. 요구사항
 * 동물은 보호자랑 같이 옴. 가끔 보호소에서 옴.
 * 보호자가 여러마리의 동물을 데리고 올 때도 있음.
 * 보호자는 이름, 나이, 전화번호, 주소 정보
 * 동물은 병명, 이름, 나이, 몸무게 정보가 필요.
 * 
 * 
 * 초보 : 1명 보호자당 여러 반려동물

 * 2. 개념 모델링
 * 동물			보호자
 * ---------------------
 * 번호			번호
 * ---------------------
 * 병명			이름
 * 이름			나이
 * 나이			전화번호
 * 몸무게		주소
 *  
 * 
 * 3. 논리 모델링
 * 
 * 동물			보호자
 * ---------------------
 * 번호P		번호P
 * ---------------------
 * 병명NN			이름NN
 * 이름NN			나이NN
 * 나이D0			전화번호U
 * 몸무게D(3)		주소NN
 * 보호자ID FK
 * 
 * 
 * 
 * 4. 물리 모델링
 * 
 * 
 * 5. 구현*/

/*CREATE TABLE TBL_MEMBER (
ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
MEMBER_NAME VARCHAR2(1000) NOT NULL,
MEMBER_AGE NUMBER NOT NULL,
MEMBER_PHONE VARCHAR2(1000) UNIQUE NOT NULL,
MEMBER_ADDRESS VARCHAR2(1000) NOT NULL
);*/

/*CREATE TABLE TBL_PET (
	ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
	PET_DISEASE VARCHAR2(1000) NOT NULL,
	PET_NAME VARCHAR2(1000) NOT NULL,
	PET_AGE NUMBER(3) DEFAULT 0,
	PET_WEIGHT NUMBER(10) DEFAULT 0,
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_PET_MEMBER FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(ID)
);*/
 /** 고수 : 보호소에서 온 동물을 따로 관리.*/
/*
 * 보호자 = 보호소 일 때 따로*/
/*동물			보호자			보호소 동물			병원
 * ---------------------------------------------------------------------
 * 번호			번호			번호				번호(등록 번호의 개념?)
 * --------------------------------------------------------
 * 병명			이름			병명				동물 ID(주인 있는 동물은 동물에서, 보호소 동물은 보호소 테이블에서)
 * 이름			나이			이름
 * 나이			전화번호		나이
 * 몸무게		주소			무게
 * 보호자ID FK
 * */


/*
 * 1. 요구사항 분석
 *    안녕하세요, 동물병원을 곧 개원하는 원장입니다.
 *    동물은 보호자랑 항상 같이 옵니다. 가끔 보호소에서 오는 동물도 있습니다.
 *    보호자가 여러 마리의 동물을 데리고 올 수 있습니다.
 *    보호자는 이름, 나이, 전화번호, 주소 정보를 알려줘야 하고
 *    동물은 병명, 이름, 나이, 몸무게 정보가 필요합니다.
 * 
 * 2. 개념 모델링
 * 3. 논리 모델링
 * 4. 물리 모델링
 * 5. 구현 
 * 
 * 쉬운 버전: 한 명의 보호자당 여러 마리의 반려동물이 있다.
 * 어려운 버전: 보호소에서 온 동물은 따로 관리한다.
 * */

/*쉬운 버전*/
/*CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(1000) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(1000) NOT NULL,
   OWNER_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);*/

/*어려운 버전*/
/*CREATE TABLE TBL_CENTER(
   ID NUMBER CONSTRAINT PK_CENTER PRIMARY KEY,
   CENTER_NAME VARCHAR2(1000) NOT NULL,
   CENTER_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000)
);

DROP TABLE TBL_PET;
CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   OWNER_ID NUMBER NOT NULL,
   CONSTRAINT FK_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

DROP TABLE TBL_CENTER_PET;
CREATE TABLE TBL_CENTER_PET(
   ID NUMBER CONSTRAINT PK_CENTER_PET PRIMARY KEY,
   CENTER_ID NUMBER NOT NULL,
   CONSTRAINT FK_CENTER_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_CENTER_PET_CENTER FOREIGN KEY(CENTER_ID)
   REFERENCES TBL_CENTER(ID)
);*/

/*
1. 요구 사항
    커뮤니티 게시판을 만들고 싶어요.
    게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
    게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요.
    작성자는 회원(TBL_MEMBER)정보를 그대로 사용해요.
    댓글에도 작성자가 필요해요.

2. 개념 모델링
회원(작성자)		게시판		게시글		댓글
ID					ID			ID
------------------------------------------------
TBL_MEMBER						작성자FK	작성자FK	
								게시판FK	게시글FK
								제목
								내용
								작성시간
								


3. 논리 모델링
4. 물리 모델링
5. 구현
*/
CREATE TABLE TBL_POST(
ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
POST_TITLE VARCHAR2(1000),
POST_CONTENT VARCHAR2(1000),
POST_TIME DATE DEFAULT SYSDATE,
MEMBER_ID NUMBER NOT NULL,
CONSTRAINT FK_POST_MEMBER FOREIGN KEY(MEMBER_ID)
REFERENCES TBL_MEMBER(ID)
);

CREATE TABLE TBL_COMMENT(
ID NUMBER CONSTRAINT PK_COMMENT PRIMARY KEY,
COMMENT_CONTENT VARCHAR2(1000),
COMMENT_TIME DATE DEFAULT SYSDATE,
MEMBER_ID NUMBER NOT NULL,
POST_ID NUMBER NOT NULL,
CONSTRAINT FK_COMMENT_MEMBER FOREIGN KEY(MEMBER_ID)
REFERENCES TBL_MEMBER(ID),
CONSTRAINT FK_COMMENT_POST FOREIGN KEY(POST_ID)
REFERENCES TBL_POST(ID)
);


/*
1. 요구 사항
    마이페이지에서 회원 프로필을 구현하고 싶습니다.
    회원당 프로필사진을 여러 개 설정할 수 있고,
    대표 이미지로 선택된 프로필만 화면에 보여주고 싶습니다.

2. 개념 모델링
회원		프사		
----------------------
ID			ID			
----------------------
이름		이름		
			회원FK		
			경로
			크기			


3. 논리 모델링
4. 물리 모델링
5. 구현
*/
/*
 * 
 * 프로필이 다수이므로 프로필에 FK*/
/*CREATE TABLE TBL_PROFILE(
ID NUMBER CONSTRAINT PK_PROFILE PRIMARY KEY,
PROFILE_MANE VARCHAR2(1000) NOT NULL,
PROFILE_FILE_SIZE NUMBER NOT NULL,
PROFILE_PATH VARCHAR2(1000) NOT NULL,
PROFILE_SELECTED VARCHAR2(1000) DEFAULT '일반',
/* 왠만하면 문자열로*/
MEMBER_ID NUMBER NOT NULL,
CONSTRAINT FK_PROFILE_MEMBER FOREIGN KEY(MEMBER_ID)
REFERENCES TBL_MEMBER(ID)
);*/

/*
 * boolean 대신 0과 1로 구분해서 1인 경우를 대표사진으로 설정.*/
/*SELECT PROFILE_MANE, PROFILE_FILE_SIZE, PROFILE_PATH
FROM TBL_PROFILE
WHERE TBL_PROFILE.PROFILE_SELECTED = 1;*/



/*
 * 1. 요구사항
 * 	회원들끼리 좋아요를 누를 수 있습니다.
 *   회원의 마이페이지에 좋아요 누른 회원들이 뜸.
 * 좋아요 누른 리스트에 멤버 FK
 * 좋아요한 회원들 각각에 
 * 
 * 2. 개념 모델링
 * 회원 	좋아요 리스트   마이페이지
 * 번호P	번호P			번호
 * ------------------------------
 * 			누른 사람		누른 사람FK
 * 			받은 사람		
 * 			
 * 		
 * */

CREATE TABLE TBL_LIKE (
	ID NUMBER CONSTRAINT PK_LIKE PRIMARY KEY,
	LIKE_GIVE_ID NUMBER NOT NULL,
	LIKE_TAKE_ID NUMBER NOT NULL,
	CONSTRAINT FK_LIKE_GIVE_MEMBER FOREIGN KEY(LIKE_GIVE_ID)
	REFERENCES TBL_MEMBER(ID),
	CONSTRAINT FK_LIKE_TAKE_MEMBER FOREIGN KEY(LIKE_TAKE_ID)
	REFERENCES TBL_MEMBER(ID)
);

/*
요구사항
자동차 : 여러 명의 차주로 히스토리,
차주 : 여러 대의 자동차 소유
등록증 : 자동차(브랜드, 모델명, 가격, 출시일)
차주(이름, 전화번호, 주소)


차주  	  	자동차			등록증
ID PK		ID	PK			ID PK
이름NN		브랜드NN		차주FK
전화번호NN	모델명NN		자동차FK
주소		가격D0			등록기간(형식?)
			출시일DATE
**/

CREATE TABLE TBL_OWNER (
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(1000) NOT NULL,
	OWNER_PHONE VARCHAR2(1000) NOT NULL,
	OWNER_ADDRESS VARCHAR2(1000)
);

CREATE TABLE TBL_CAR (
	ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(1000) NOT NULL,
	CAR_NAME VARCHAR2(1000) NOT NULL,
	CAR_PRICE NUMBER(5) DEFAULT 0,
	CAR_RELEASE_DATE DATE DEFAULT SYSDATE
);

CREATE TABLE TBL_REGISTER(
	ID NUMBER CONSTRAINT PK_REGISTER PRIMARY KEY,	
	REGISTER_PERIOD VARCHAR2(1000) NOT NULL,
	OWNER_ID NUMBER NOT NULL,
	CAR_ID NUMBER NOT NULL,
	CONSTRAINT FK_REGISTER_OWNER FOREIGN KEY(OWNER_ID)
	REFERENCES TBL_OWNER(ID),
	CONSTRAINT FK_REGISTER_CAR FOREIGN KEY(CAR_ID)
	REFERENCES TBL_CAR(ID)
	);


/*
 * 요구사항
 * 학생 : 학번, 이름, 전공, 학년
 * 교수 : 교수번호, 이름, 전공, 직위
 * 과목 : 과목번호 , 과목명, 학점
 * 학생 -> 여러 과목 수강
 * 교수 -> 여러 과목 강의
 * 학생이 수강한 과목은 성적이 모두 기록
 * 
 * 
 * 학생		교수		과목			수강기록
 * 학번		교수번호	과목번호		ID
 * ==============================================
 * 이름NN	이름NN		과목명NN		교수FK
 * 전공NN	전공NN		학점NN			과목FK
 * 학년NN	직위NN						성적(학생)
 * 										학생FK
 * */


CREATE TABLE TBL_STUDENT_SUBJECT(
   ID NUMBER CONSTRAINT PK_STUDENT_SUBJECT PRIMARY KEY,   
   STUDENT_ID NUMBER NOT NULL,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_STUDENT_SUBJECT_STUDENT FOREIGN KEY(STUDENT_ID)
   REFERENCES TBL_STUDENT(ID),
   CONSTRAINT FK_STUDENT_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);

CREATE TABLE TBL_LECTURE(
   ID NUMBER CONSTRAINT PK_LECTURE PRIMARY KEY,
   PROFESSOR_ID NUMBER,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LECTURE_PROFESSOR FOREIGN KEY(PROFESSOR_ID)
   REFERENCES TBL_PROFESSOR(ID),
   CONSTRAINT FK_LECTURE_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);

/*
1. 요구사항
    대카테고리, 소카테고리가 필요해요.
    
2. 개념 모델링
대카	소카
ID		ID
============== PK
이름NN	이름NN
		대카FK
		
3. 논리 모델링
4. 물리 모델링
5. 구현
*/

CREATE TABLE TBL_CATEGORY_A (
	ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
	CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);
CREATE TABLE TBL_CATEGORY_B(
	ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
	CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_A_ID NUMBER NOT NULL,
	CONSTRAINT FK_B_A FOREIGN KEY(CATEGORY_A_ID)
	REFERENCES TBL_CATEGORY_A(ID)

);
CREATE TABLE TBL_CATEGORY_C (
	ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
	CATEGORY_C_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_B_ID NUMBER NOT NULL,
	CONSTRAINT FK_C_B FOREIGN KEY(CATEGORY_B_ID)
	REFERENCES TBL_CATEGORY_B(ID)
);

/*
1. 요구사항
   회의실 예약 서비스를 제작하고 싶습니다.
   회원별로 등급이 존재하고 사무실마다 회의실이 여러 개 있습니다.
   회의실 이용 가능 시간은 파트 타임으로서 여러 시간대가 존재합니다.
    
2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/



CREATE TABLE TBL_OFFICE_ROOM (
	ID NUMBER CONSTRAINT PK_OFFICE_ROOM PRIMARY KEY,
	OFFICE_ROOM_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CONFERENCE_ROOM(
	ID NUMBER CONSTRAINT PK_CONFERENCE_ROOM PRIMARY KEY,
	CONFERENCE_ROOM_NAME VARCHAR2(1000) NOT NULL,
	OFFICE_ROOM_ID NUMBER NOT NULL,
	CONSTRAINT FK_CONFERENCE_OFFICE FOREIGN KEY(OFFICE_ROOM_ID)
	REFERENCES TBL_OFFICE_ROOM(ID)
	);

CREATE TABLE TBL_ROOM_PARTTIME(
	ID NUMBER CONSTRAINT PK_ROOM_PARTTIME PRIMARY KEY,
	ROOM_PARTTIME_TIME DATE UNIQUE,
	CONFERENCE_ROOM_ID NUMBER NOT NULL,
	CONSTRAINT FK_TIME_OFFICE FOREIGN KEY(CONFERENCE_ROOM_ID)
	REFERENCES TBL_CONFERENCE_ROOM(ID)
);

CREATE TABLE TBL_RESERVATION (
	ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
	MEMBER_ID NUMBER NOT NULL,
	ROOM_PARTTIME_ID NUMBER NOT NULL,
	CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(ID),
	CONSTRAINT FK_RESERVATION_ROOM_PARTTIME FOREIGN KEY(ROOM_PARTTIME_ID)
	REFERENCES TBL_ROOM_PARTTIME(ID)
);


/*
1. 요구사항
   유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
   아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
   체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
   아이들은 여러 번 체험학습에 등록할 수 있어요.
    
2. 구현
*/
CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(1000) NOT NULL,
	PARENT_AGE NUMBER DEFAULT 0,
	PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
	PARENT_PHONE VARCHAR2(1000) NOT NULL,
	PARENT_GENDER VARCHAR2(1000)
);

CREATE TABLE TBL_KID (
	ID NUMBER CONSTRAINT PK_KID PRIMARY KEY,
	KID_NAME VARCHAR2(1000) NOT NULL,
	KID_AGE NUMBER DEFAULT 0,
	KID_GENDER VARCHAR2(1000),
	PARENT_ID NUMBER NOT NULL,
	CONSTRAINT FK_KID_PARENT FOREIGN KEY(PARENT_ID)
	REFERENCES TBL_PARENT(ID)
);




CREATE TABLE TBL_FILEDTRIP(
	ID NUMBER CONSTRAINT PK_FILEDTRIP PRIMARY KEY,
	FILEDTRIP_NAME VARCHAR2(1000) NOT NULL,
	FILEDTRIP_CONTENT VARCHAR2(1000) NOT NULL,
	KINDERGARTEN_ID NUMBER NOT NULL,
	CONSTRAINT FK_FILEDTRIP_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
	REFERENCES TBL_KINDERGARTEN(ID)
	
);

CREATE TABLE TBL_KINDERGARTEN(
	ID NUMBER CONSTRAINT PK_KINDERGARTEN PRIMARY KEY,
	KINDERGARTEN_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_TRIP_IMAGE(
	ID NUMBER CONSTRAINT PK_TRIP_IMAGE PRIMARY KEY,
	TRIP_IMAGE_NAME VARCHAR2(1000) NOT NULL,
	TRIP_IMAGE_PATH VARCHAR2(1000) NOT NULL,
	TRIP_IMAGE_FILE_SIZE NUMBER DEFAULT 0,
	FILEDTRIP_ID NUMBER NOT NULL,
	CONSTRAINT FK_TRIP_IMAGE_FIELDTRIP FOREIGN KEY(FILEDTRIP_ID)
	REFERENCES TBL_FILEDTRIP(ID)
);

CREATE TABLE TBL_TRIP_RESERVATION (
	ID NUMBER CONSTRAINT PK_TRIP_RESERVATION PRIMARY KEY,
	KID_ID NUMBER NOT NULL,
	FILEDTRIP_ID NUMBER NOT NULL,
	CONSTRAINT FK_TRIP_RESERVATION_KID FOREIGN KEY(KID_ID)
	REFERENCES TBL_KID(ID),
	CONSTRAINT FK_TRIP_RESERVATION_FIELDTRIP FOREIGN KEY(FILEDTRIP_ID)
	REFERENCES TBL_FILEDTRIP(ID)
);

/*
1. 요구사항
   안녕하세요, 광고 회사를 운영하려고 준비중인 사업가입니다.
   광고주는 기업이고 기업 정보는 이름, 주소, 대표번호, 기업종류(스타트업, 중소기업, 중견기업, 대기업)입니다.
   광고는 제목, 내용이 있고 기업은 여러 광고를 신청할 수 있습니다.
   기업이 광고를 선택할 때에는 카테고리로 선택하며, 대카테고리, 중카테고리, 소카테고리가 있습니다.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/

CREATE TABLE TBL_COMPANY(
	ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
	COMPANY_NAME VARCHAR2(1000) NOT NULL,
	COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
	COMPANY_TELEPHONE VARCHAR2(1000) NOT NULL,
	COMPANY_CATEGORY VARCHAR2(1000) DEFAULT '스타트업'
); 



CREATE TABLE TBL_AD_CATEGORY_A (
	ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
	AD_CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);
CREATE TABLE TBL_AD_CATEGORY_B(
	ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
	AD_CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
	AD_CATEGORY_A_ID NUMBER NOT NULL,
	CONSTRAINT FK_B_A FOREIGN KEY(AD_CATEGORY_A_ID)
	REFERENCES TBL_AD_CATEGORY_A(ID)

);
CREATE TABLE TBL_AD_CATEGORY_C (
	ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
	AD_CATEGORY_C_NAME VARCHAR2(1000) NOT NULL,
	AD_CATEGORY_B_ID NUMBER NOT NULL,
	CONSTRAINT FK_C_B FOREIGN KEY(AD_CATEGORY_B_ID)
	REFERENCES TBL_AD_CATEGORY_B(ID)
);

CREATE TABLE TBL_AD(
	ID NUMBER CONSTRAINT PK_AD PRIMARY KEY,
	AD_NAME VARCHAR2(1000) NOT NULL,
	AD_CONTENT VARCHAR2(1000) NOT NULL,
	AD_CATEGORY_C_ID NUMBER NOT NULL,
	CONSTRAINT FK_AD_SALES_C FOREIGN KEY(AD_CATEGORY_C_ID)
	REFERENCES TBL_AD_CATEGORY_C(ID));
	
);

	CREATE TABLE TBL_AD_SALES (
	ID NUMBER CONSTRAINT PK_AD_SALES PRIMARY KEY,
	COMPANY_ID NUMBER NOT NULL,
	AD_ID NUMBER NOT NULL,
	CONSTRAINT FK_AD_SALES_COMPANY FOREIGN KEY(COMPANY_ID)
	REFERENCES TBL_COMPANY(ID),
	CONSTRAINT FK_AD_SALES_AD FOREIGN KEY(AD_ID)
	REFERENCES TBL_AD(ID)
	
	
);

/*
1. 요구사항
   음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
   음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
   당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.                            
2. 개념 모델링


3. 논리 모델링
4. 물리 모델링
5. 구현
*/
*/
CREATE TABLE TBL_SOFT_DRINK(
   ID NUMBER CONSTRAINT PK_SOFT_DRINK PRIMARY KEY,
   SOFT_DRINK_NAME VARCHAR2(1000)
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_LOTTERY(
   ID NUMBER CONSTRAINT PK_LOTTERY PRIMARY KEY,
   LOTTERY_NUMBER VARCHAR2(1000) NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LOTTERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_CIRCULATION(
   ID NUMBER CONSTRAINT PK_CIRCULATION PRIMARY KEY,
   SOFT_DRINK_ID NUMBER NOT NULL,
   LOTTERY_ID NUMBER NOT NULL,
   CONSTRAINT FK_CIRCULATION_SOFT_DRINK FOREIGN KEY(SOFT_DRINK_ID)
   REFERENCES TBL_SOFT_DRINK(ID),
   CONSTRAINT FK_CIRCULATION_LOTTERY FOREIGN KEY(LOTTERY_ID)
   REFERENCES TBL_LOTTERY(ID)
);

DROP TABLE TBL_MEMBER;
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_DELIVERY(
   ID NUMBER CONSTRAINT PK_DELIVERY PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   DELEVERY_STATUS VARCHAR2(1000) DEFAULT '배송 준비 중',
   CONSTRAINT FK_DELEVERY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_DELEVERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*
1. 요구사항
   이커머스 창업 준비중입니다. 기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
   기업의 정보는 기업 이름, 주소, 대표번호가 있고
   사용자 정보는 이름, 주소, 전화번호가 있습니다. 
   결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
   상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
   사용자는 등록한 카드의 정보를 저장할 수 있으며, 카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

*/


CREATE TABLE TBL_COMPANY (
   ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
   COMPANY_NAME VARCHAR2(1000) NOT NULL,
   COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
   COMPANY_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PRODUCT (
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STACK NUMBER DEFAULT 0,
   COMPANY_ID NUMBER NOT NULL,
   CONSTRAINT FK_PRODUCT_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID)
);

CREATE TABLE TBL_CREDIT_CARD(
   ID NUMBER CONSTRAINT PK_CREDIT_CARD PRIMARY KEY,
   CREDIT_CARD_CATEGORY VARCHAR2(1000) NOT NULL,
   CREDIT_CARD_NUMBER VARCHAR2(1000) NOT NULL,
   MEMBER_ID NUMBER NOT NULL,
   CONSTRAINT FK_CREDIT_CARD_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   PRODUCT_ID NUMBER NOT NULL,
   CREDIT_CARD_ID NUMBER NOT NULL,
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID),
   CONSTRAINT FK_ORDER_CREDIT_CARD FOREIGN KEY(CREDIT_CARD_ID)
   REFERENCES TBL_CREDIT_CARD(ID)
);